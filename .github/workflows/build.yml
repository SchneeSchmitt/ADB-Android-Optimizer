name: Build Installers

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: pip install PySide6 pyinstaller

    - name: Remove .bat files
      run: find . -name "*.bat" -type f -delete

    - name: Create executable
      run: pyinstaller --onefile --windowed --name ADB_Android_Optimizer main.py
        
    - name: Package installer
      run: |
        if [[ '${{ runner.os }}' == 'Windows' ]]; then
          # Windows - Create EXE installer
          mkdir -p installer
          cp -r dist/* installer/
          
          curl -O https://jrsoftware.org/download.php/is.exe
          ./is.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-
          
          echo "[Setup]" > installer.iss
          echo "AppName=ADB Android Optimizer" >> installer.iss
          echo "AppVersion=1.0" >> installer.iss
          echo "DefaultDirName={pf}\ADB_Android_Optimizer" >> installer.iss
          echo "DefaultGroupName=ADB Android Optimizer" >> installer.iss
          echo "OutputDir=." >> installer.iss
          echo "OutputBaseFilename=ADB_Android_Optimizer_Setup" >> installer.iss
          echo "Compression=lzma" >> installer.iss
          echo "SolidCompression=yes" >> installer.iss
          echo "" >> installer.iss
          echo "[Files]" >> installer.iss
          echo 'Source: "installer\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs' >> installer.iss
          echo "" >> installer.iss
          echo "[Icons]" >> installer.iss
          echo 'Name: "{group}\ADB Android Optimizer"; Filename: "{app}\ADB_Android_Optimizer.exe"' >> installer.iss

          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss
          
        elif [[ '${{ runner.os }}' == 'macOS' ]]; then
          # macOS - Create DMG
          mkdir -p dist/dmg
          cp -r dist/ADB_Android_Optimizer.app dist/dmg/
          
          hdiutil create \
            -volname "ADB Android Optimizer" \
            -srcfolder dist/dmg \
            -ov \
            -format UDZO \
            ADB_Android_Optimizer.dmg
            
        else
          # Linux - Create DEB package
          mkdir -p debian/usr/local/bin
          mkdir -p debian/usr/share/applications
          
          cp dist/ADB_Android_Optimizer debian/usr/local/bin/
          
          echo "Package: adb-android-optimizer" > debian/DEBIAN/control
          echo "Version: 1.0" >> debian/DEBIAN/control
          echo "Section: utils" >> debian/DEBIAN/control
          echo "Priority: optional" >> debian/DEBIAN/control
          echo "Architecture: amd64" >> debian/DEBIAN/control
          echo "Maintainer: Your Name <your.email@example.com>" >> debian/DEBIAN/control
          echo "Description: ADB Android Optimizer Tool" >> debian/DEBIAN/control

          dpkg-deb --build debian ADB_Android_Optimizer.deb
        fi
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ runner.os }}-installer
        path: |
          ADB_Android_Optimizer_Setup.exe
          ADB_Android_Optimizer.dmg
          ADB_Android_Optimizer.deb